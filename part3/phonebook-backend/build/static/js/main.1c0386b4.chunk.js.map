{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","changes","put","Button","onClick","text","Person","person","deletePerson","name","number","Persons","persons","map","key","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","filter","handleFilter","Notification","notification","message","notificationClass","error","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","setNotification","useEffect","personService","initialPersons","filteredPersons","toLowerCase","includes","event","target","preventDefault","a","window","confirm","existingPerson","find","returnedPerson","setTimeout","concat","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c0386b4.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, changes) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, changes)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Button = ({ onClick, text }) => (\n  <button onClick={onClick}>\n    {text}\n  </button>\n)\n\nconst Person = ({ person, deletePerson }) => (\n  <p>\n    {person.name} {person.number} <Button text=\"Delete\" onClick={() => deletePerson(person.id, person.name)} />\n  </p>    \n)\n\nconst Persons = ({ persons, deletePerson }) => (\n    persons.map(persons => \n      <Person key={persons.name} person={persons} deletePerson={deletePerson} />\n    )\n)\n\nconst PersonForm = (props) => (\n  <form onSubmit={props.addPerson}>\n    <div>\n      name: <input value={props.newName} onChange={props.handleNameChange} />\n    </div>\n    <div>\n      number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Filter = ({ filter, handleFilter }) => (\n  <p>\n    Filter shown with <input value={filter} onChange={handleFilter} />\n  </p>\n)\n\nconst Notification = ({ notification }) => {\n  if (notification.message === null) {\n    return null\n  }\n  const notificationClass = !notification.error ? 'notification success' : 'notification error'\n  return (\n    <div className={notificationClass}>\n      {notification.message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notification, setNotification ] = useState({\n    message: null,\n    error: false\n  })\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (persons.map(a => a.name).includes(newName)) {\n      if (window.confirm(`${newName} is already in the phonebook.  Do you want to update their number to the new one?`)) { \n        const existingPerson = persons.find(person => person.name === newName)\n        const id = existingPerson.id\n        const changes = { ...existingPerson, number: newNumber}\n        personService\n          .update(id, changes)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n            setNewName('')\n            setNewNumber('')\n            setNotification({ message: `Updated phone number for ${returnedPerson.name}`, error: false })\n            setTimeout(() => {\n              setNotification({ message: null, error: false })\n            }, 5000)\n          })\n        }\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNotification({ message: `Added ${returnedPerson.name} to phonebook`, error: false })\n          setTimeout(() => {\n            setNotification({ message: null, error: false })\n          }, 5000)\n        })\n      }\n  }\n\n  const deletePerson = (id, name) => {\n    if (window.confirm(`Delete '${name}'?`)) { \n      personService\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter(a => a.id !== id))\n        })\n        .catch(error => {\n          setPersons(persons.filter(a => a.id !== id))\n          setNotification({ message: `'${name}' has already been deleted from the server.`, error: true })\n          setTimeout(() => {\n            setNotification({ message: null, error: false })\n          }, 5000)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilter = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const filteredPersons = persons.filter(persons => persons.name.toLowerCase().includes(filter.toLowerCase()))\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter filter={filter} handleFilter={handleFilter} />\n      <h2>Add a new person</h2>\n      <PersonForm \n        addPerson={addPerson}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={filteredPersons} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}